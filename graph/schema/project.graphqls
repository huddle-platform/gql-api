type Project{
    id: ID!
    name: String!
    description: String!
    languages: [String!]!
    location: Location
    participants: [User!]!
    creator: User!
    addParticipant(id: ID!): Boolean!
    removeParticipant(id: ID!): Boolean!
}

type Location{
    name: String!
    coordinates: Coordinate
}

type Coordinate{
    latitude: Float!
    longitude: Float!
}


input SearchOptions{
    filters:[String!]
    cathegroy: String
}

extend type Query{
    searchProjects(searchString: String!, options: SearchOptions!={}, offset:Int!=0, countLimit: Int!=20): [Project!]!
    getProject(id: ID!): Project
    savedProjects: [Project!]
}

input LocationInput{
    name: String!
    coordinates: CoordinateInput
}
input CoordinateInput{
    latitude: Float!
    longitude: Float!
}

input NewProjectInput{
    name: String!
    description: String!
    languages: [String!]!
    location: LocationInput
}
extend type Mutation{
    createProject(project: NewProjectInput): Project!
    # add Project to list of saved projects, return updated list
    addSavedProject(id: ID!): Boolean!
    removeSavedProject(id: ID!):Boolean!
}